# LICENSE
# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com

from typing import Optional

from fastapi import Cookie, Depends, Header
from fastapi.responses import RedirectResponse
from gws_core.core.utils.settings import Settings
from gws_core.user.current_user_service import CurrentUserService
from gws_core.user.jwt_service import JWTService
from gws_core.user.unique_code_service import UniqueCodeService
from gws_core.user.user import User
from starlette.responses import JSONResponse

from ..core_app import core_app
from ..user.auth_service import AuthService
from .credentials_dto import CredentialsDTO
from .user_dto import UserData
from .user_exception import InvalidTokenException
from .user_service import UserService


@core_app.get("/user/me", response_model=UserData, tags=["User"])
async def read_user_me(current_user: UserData = Depends(AuthService.check_user_access_token)):
    """
    Get current user details.
    """

    return current_user


@core_app.get("/user/activity", tags=["User"], summary="Get user activities")
async def get_user_activity(user_id: Optional[str] = None,
                            activity_type: Optional[str] = None,
                            page: int = 0,
                            number_of_items_per_page: int = 20,
                            _: UserData = Depends(AuthService.check_user_access_token)):
    """
    Get the list of user activities on the lab

    - **user_id**: the id the user [optional]
    - **activity_type**: the type of the activity to retrieve [optional]. The valid types of activities are:
      - **CREATE** : the creation of an object
      - **SAVE**   : the saving of an object
      - **START**  : the start of an experiment
      - **STOP**   : the stop of an experiment
      - **DELETE** : the deletion of an experiment
      - **ARCHIVE** : the archive of an object
      - **VALIDATE** : the valdaition of an experiment
      - **HTTP_AUTHENTICATION** : HTTP authentication
      - **HTTP_UNAUTHENTICATION** : HTTP unauthentication
      - **CONSOLE_AUTHENTICATION** : console authentication (through CLI or notebook)
      - **CONSOLE_UNAUTHENTICATION** : console unauthentication
    - **page**: the page number
    - **number_of_items_per_page**: the number of items per page. Defaults to 20 items per page.
    """

    return UserService.fecth_activity_list(
        user_id=user_id,
        activity_type=activity_type,
        page=page,
        number_of_items_per_page=number_of_items_per_page,
    ).to_json()


@core_app.post("/login", tags=["User"], summary="Login to the lab by requesting central")
def login(credentials: CredentialsDTO) -> JSONResponse:
    """
    Log the user using central
    """

    return AuthService.login(credentials)


@core_app.get("/check-token", tags=["User"], summary="Check user's token")
def check_token(current_user: UserData = Depends(AuthService.check_user_access_token)) -> str:
    """Simple route to check the user's token (used in automatic dev login), returns the user's id if valid
    """
    return current_user.id


@core_app.get("/login-temp-access/{unique_code}", tags=["User"],
              summary="Log the user from the temp access token generated by central")
def login_from_temp_token(unique_code: str) -> RedirectResponse:

    try:
        AuthService.check_unique_code(unique_code)

        token = AuthService.generate_user_access_token(CurrentUserService.get_and_check_current_user().id)
        response = RedirectResponse(Settings.get_front_url() + '/auto-login?expiresIn=' +
                                    str(JWTService.get_token_duration_in_seconds()))
        AuthService.set_token_in_response(token, JWTService.get_token_duration_in_seconds(), response)
        return response
    except Exception:
        # if there is any problem redirect to the front base url (login)
        return RedirectResponse(Settings.get_front_url())


@core_app.post("/dev-login", tags=["User"], summary="Login to the dev lab using the prod token")
def dev_login(authorization_header: Optional[str] = Header(default=None, alias="Authorization"),
              authorization_cookie: Optional[str] = Cookie(default=None, alias="Authorization")) -> User:
    """
    Log the user on the dev lab by calling the prod api
    """
    # get the token from the header or the cookies
    token: str = authorization_header or authorization_cookie

    if token is None:
        raise InvalidTokenException()

    return AuthService.dev_get_check_user(token)


@core_app.post("/logout", tags=["User"], summary="Logout the user")
def logout() -> JSONResponse:
    """
    Logout
    """

    return AuthService.logout()
