# LICENSE
# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com

from __future__ import annotations

import copy
from enum import Enum
from typing import (TYPE_CHECKING, Any, Dict, Generic, List, Optional, Set,
                    Type, TypeVar, final)

from gws_core.core.utils.utils import Utils
from gws_core.model.typing_dict import TypingStatus
from gws_core.resource.resource_list_base import ResourceListBase
from gws_core.resource.technical_info import TechnicalInfoDict
from peewee import (BooleanField, CharField, DeferredForeignKey, Expression,
                    ForeignKeyField, ModelDelete, ModelSelect)

from ..core.classes.enum_field import EnumField
from ..core.decorator.transaction import transaction
from ..core.exception.exceptions.bad_request_exception import \
    BadRequestException
from ..core.model.model_with_user import ModelWithUser
from ..core.utils.logger import Logger
from ..core.utils.reflector_helper import ReflectorHelper
from ..experiment.experiment_enums import ExperimentType
from ..impl.file.file_r_field import FileRField
from ..impl.file.fs_node import FSNode
from ..impl.file.fs_node_model import FSNodeModel
from ..impl.file.local_file_store import LocalFileStore
from ..model.typing import Typing
from ..model.typing_manager import TypingManager
from ..resource.kv_store import KVStore
from ..resource.resource import Resource
from ..tag.taggable_model import TaggableModel
from .r_field.r_field import BaseRField

if TYPE_CHECKING:
    from ..experiment.experiment import Experiment
    from ..task.task_model import TaskModel

# Typing names generated for the class Resource
CONST_RESOURCE_MODEL_TYPING_NAME = "MODEL.gws_core.ResourceModel"

ResourceType = TypeVar('ResourceType', bound=Resource)


class ResourceOrigin(Enum):
    # If the resource was imported manually by the user
    UPLOADED = "UPLOADED"
    # Generated by a importer
    IMPORTED = "IMPORTED"
    # Generated by a transformer
    TRANSFORMED = "TRANSFORMED"
    # Generated by a task
    GENERATED = "GENERATED"
    # Specific type for the ActionManager
    ACTIONS = "ACTIONS"


# Use the typing decorator to avoid circular dependency
class ResourceModel(ModelWithUser, TaggableModel, Generic[ResourceType]):

    """
    ResourceModel class.
    """

    # typing name of the resource
    resource_typing_name = CharField(null=False)

    # Path to the kv store if the kv exists for this resource model
    kv_store_path = CharField(null=True)

    origin: ResourceOrigin = EnumField(choices=ResourceOrigin, default=ResourceOrigin.GENERATED)

    experiment: Experiment = DeferredForeignKey('Experiment', null=True, index=True)
    task_model: TaskModel = DeferredForeignKey('TaskModel', null=True, index=True)

    # for children resource (usually resource inside ResourceSet), it stores the parent resource id
    # lazy_load = False to avoir loading the resource, and it only contains the id
    parent_resource_id: str = ForeignKeyField('self', null=True, index=True, lazy_load=False)

    name: str = CharField(null=False)

    fs_node_model: FSNodeModel = ForeignKeyField(FSNodeModel, null=True, index=True, backref="+")

    # true when the resource is UPLOADED or is an experiment output
    show_in_databox: bool = BooleanField(default=False)

    # provided when the resource is generated by an experiment, this contains the port name of the task that generated it
    generated_by_port_name: str = CharField(null=True)

    _table_name = 'gws_resource'
    _resource: ResourceType = None

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # check that the class level property _typing_name is set
        if self._typing_name == CONST_RESOURCE_MODEL_TYPING_NAME and type(self) != ResourceModel:  # pylint: disable=unidiomatic-typecheck
            raise BadRequestException(
                f"The resource model {self.full_classname()} is not decorated with @TypingDecorator, it can't be instantiate. Please decorate the class with @TypingDecorator")

    ########################################## MODEL METHODS ######################################

    @transaction()
    def delete_instance(self, *args, **kwargs):
        result = super().delete_instance(*args, **kwargs)
        if self.fs_node_model:
            self.fs_node_model.delete_instance()

        # TODO to improve, if there is an error, the kvstore is not restored
        kv_store: Optional[KVStore] = self.get_kv_store()
        if kv_store:
            kv_store.remove()

        return result

    @classmethod
    def drop_table(cls, *args, **kwargs):
        """
        Drop model table
        """

        if not cls.table_exists():
            return

        super().drop_table(*args, **kwargs)

    @classmethod
    def select_by_resource_typing_name(cls, resource_typing_name: str) -> ModelSelect:
        return cls.select_me().where(cls.resource_typing_name == resource_typing_name)

    @classmethod
    def select_by_type_and_sub_types(cls, type_: Type[Resource]) -> ModelSelect:
        """select resource by type of any subclass of this type

        :param type_: _description_
        :type type_: Type[Resource]
        :return: _description_
        :rtype: ModelSelect
        """
        if not Utils.issubclass(type_, Resource):
            raise Exception(f"{type_} is not a subclass of Resource")

        # retrieve all the sub type of the type
        resource_types: Set[Type[Resource]] = {type_}.union(Utils.get_all_subclasses(type_))
        # get the typing names
        resource_typing_names = [resource_type._typing_name for resource_type in resource_types]
        # select the resource model with the typing name
        return ResourceModel.select().where(ResourceModel.resource_typing_name.in_(resource_typing_names))

    @transaction()
    def save_full(self) -> 'ResourceModel':
        """Save the resource and the fs_node if exists

        :return: [description]
        :rtype: [type]
        """
        if self.fs_node_model:
            self.fs_node_model.save()
        self.save()

        return self

    @classmethod
    def after_table_creation(cls) -> None:
        super().after_table_creation()
        cls.create_full_text_index(['data'], 'I_F_RES_DATA')

    @classmethod
    def after_all_tables_init(cls) -> None:
        """Create the foreign keys because it was deffered
        """
        cls.create_foreign_key_if_not_exist(ResourceModel.experiment)
        cls.create_foreign_key_if_not_exist(ResourceModel.task_model)

    @classmethod
    def get_by_experiment(cls, experiment_id: str) -> ModelSelect:
        return ResourceModel.select().where(ResourceModel.experiment == experiment_id)

    @classmethod
    def get_by_experiments(cls, experiment_ids: str) -> ModelSelect:
        return ResourceModel.select().where(ResourceModel.experiment.in_(experiment_ids))

    @classmethod
    def delete_list(cls, resource_model_ids: str) -> ModelDelete:
        return ResourceModel.delete().where(ResourceModel.id.in_(resource_model_ids))

    @classmethod
    def get_by_types_and_sub_expression(cls, typing_names: List[str]) -> Expression:
        """Return the expression to search resource base on a type and all its subtypes.

        If the Resource type is provided, it returns None
        """

        # If the main resource class is provided, return None because all the classes will be retrieved
        if Resource._typing_name in typing_names:
            return None

        # Retrieve all type of typing_names
        resource_types: List[Type] = [TypingManager.get_type_from_name(typing_name) for typing_name in typing_names]

        # Get all type of class and subclasses
        all_types: Set[Type[Resource]] = set()
        for resource_type in resource_types:
            all_types.update(Utils.get_all_subclasses(resource_type))
            all_types.update([resource_type])

        # Get the typing names
        all_typing_names: List[str] = [resource_type._typing_name for resource_type in all_types]

        return ResourceModel.resource_typing_name.in_(all_typing_names)

    @classmethod
    def get_by_types_and_sub(cls, typing_names: List[str]) -> ModelSelect:
        return ResourceModel.select().where(cls.get_by_types_and_sub_expression(typing_names))

    ########################################## RESOURCE ######################################

    @property
    def typing_name(self) -> str:
        return self._typing_name

    @final
    def get_resource(self, new_instance: bool = False) -> ResourceType:
        """
        Returns the resource created from the data and resource_typing_name
        if new_instance, it forces to rebuild the resource
        """

        if new_instance:
            return self._instantiate_resource()

        if self._resource is None:
            self._resource = self._instantiate_resource()

        return self._resource

    def _instantiate_resource(self) -> ResourceType:
        """
        Create the Resource object from the resource_typing_name
        """
        resource_type: Type[ResourceType] = self.get_resource_type()
        resource: ResourceType = resource_type()
        # Pass the model id to the resource
        resource._model_id = self.id

        self.send_fields_to_resource(resource)
        return resource

    @classmethod
    def from_resource(cls, resource: ResourceType, origin: ResourceOrigin = ResourceOrigin.GENERATED,
                      experiment: Experiment = None, task_model: TaskModel = None, port_name: str = None) -> ResourceModel:
        """Create a new ResourceModel from a resource

        Don't set the resource here so it is regenerate on next get (avoid using same instance)

        :return: [description]
        :rtype: [type]
        """

        # If the origin is not uploaded, then the experiment and the task must be provided
        if origin != ResourceOrigin.UPLOADED and origin != ResourceOrigin.ACTIONS:
            if experiment is None or task_model is None:
                raise Exception("To create a GENERATED, you must provide the experiment and the task")

            # replace the origin if the experiment has a special type
            if experiment.type == ExperimentType.IMPORTER:
                origin = ResourceOrigin.IMPORTED
            elif experiment.type == ExperimentType.TRANSFORMER:
                origin = ResourceOrigin.TRANSFORMED
            elif experiment.type == ExperimentType.ACTIONS:
                origin = ResourceOrigin.ACTIONS

        resource_model: ResourceModel = ResourceModel()
        resource_model.resource_typing_name = resource._typing_name
        resource_model.origin = origin
        resource_model.experiment = experiment
        resource_model.task_model = task_model
        resource_model.generated_by_port_name = port_name
        # by default only the uploaded resource are showed in databox
        resource_model.show_in_databox = origin == ResourceOrigin.UPLOADED

        # Get the name of the resource, and set it in the resource model
        name: str = None
        try:
            name = resource.name or resource.get_default_name()
        except Exception as err:
            Logger.error(f'Error while getting the default name of the resource {type(resource)}. Err : {str(err)}')
            Logger.log_exception_stack_trace(err)

        if name is None:
            name = resource._human_name
        resource_model.name = name

        # handle tags
        tags = resource.tags
        if tags is not None:
            if not isinstance(tags, dict):
                Logger.error(f"The 'tags' attribute of the resource {type(resource)} is not a dict.")
            else:
                resource_model.set_tags_dict(tags)
                # register the tags globally
                from ..tag.tag_service import TagService
                TagService.register_tags(resource_model.get_tags())

        if isinstance(resource, FSNode):

            node: FSNode

            local_file_store = LocalFileStore.get_default_instance()
            if not local_file_store.node_exists(resource):
                # Move the node to the LocalFileStore and create fs node model
                node = LocalFileStore.get_default_instance().add_node_from_path(resource.path, name)
            else:
               # On uploaded resource, the node is already in the file store, no need to add it
                node = resource
                node.file_store_id = local_file_store.id

            # update the resource path and file store
            resource.path = node.path
            resource.file_store_id = node.file_store_id

            # create the node model
            fs_node_model: FSNodeModel = FSNodeModel()
            fs_node_model.path = node.path
            fs_node_model.file_store_id = node.file_store_id
            fs_node_model.size = node.get_size()
            fs_node_model.is_symbolic_link = node.is_symbolic_link
            resource_model.fs_node_model = fs_node_model

        # synchronize the model fields with the resource fields
        resource_model.receive_fields_from_resource(resource)

        return resource_model

    @classmethod
    def save_from_resource(
            cls, resource: ResourceType, origin: ResourceOrigin = ResourceOrigin.GENERATED, experiment: Experiment = None,
            task_model: TaskModel = None, port_name: str = None) -> ResourceModel:
        """Create the ResourceModel from the Resource and save it
        """
        return cls.from_resource(
            resource, origin=origin, experiment=experiment, task_model=task_model, port_name=port_name).save_full()

    def send_fields_to_resource(self, resource: ResourceType):
        """for each BaseRField of the resource, set the value form the data or kvstore

        :param resource: [description]
        :type resource: ResourceType
        """
        # set the name
        resource.name = self.name

        properties: Dict[str, BaseRField] = resource.__get_resource_r_fields__()

        kv_store: KVStore = self.get_kv_store()
        resource._kv_store = kv_store

        # for each BaseRField of the resource, set the value form the data or kvstore
        for key, r_field in properties.items():
            # If the property is searchable, it is stored in the DB
            if r_field.searchable:
                loaded_value = copy.deepcopy(r_field.deserialize(self.data.get(key)))
                setattr(resource, key, loaded_value)

            # if it comes from the kvstore, lazy load it
            elif kv_store is not None:
                # delete the RField default value so the lazy load can be called
                delattr(resource, key)

    def receive_fields_from_resource(self, resource: ResourceType):
        """for each BaseRField of the resource, store its value to the data or kvstore

        :param resource: [description]
        :type resource: ResourceType
        """
        self.data = {}
        # init the kvstore, the directory is not created until we write on the kvstore
        kv_store: KVStore = self._get_or_create_kv_store()

        # get the r_fields of the resource
        r_fields: Dict[str, BaseRField] = resource.__get_resource_r_fields__()

        for key, r_field in r_fields.items():
            # get the attribute value corresponding to the r_field
            r_field_value: Any = getattr(resource, key)

            # specific case for the FileRField
            if isinstance(r_field, FileRField):
                # generate a new file path inside the kv store directory
                file_path = kv_store.generate_new_file()

                # dump the resource value into the file
                r_field.dump_to_file(r_field_value, str(file_path))
                # store the file path in the kv_store
                kv_store[key] = file_path
                continue

            value: Any = r_field.serialize(r_field_value)
            # If the property is searchable, store it in the DB
            if r_field.searchable:
                self.data[key] = value

            # Otherwise, store it in the kvstore
            else:
                kv_store[key] = value

    def _get_resource_r_fields(self, resource_type: Type[ResourceType]) -> Dict[str, BaseRField]:
        """Get the list of resource's r_fields,
        the key is the property name, the value is the BaseRField object
        """
        return ReflectorHelper.get_property_names_of_type(resource_type, BaseRField)

    def get_resource_type(self) -> Type[ResourceType]:
        return TypingManager.get_type_from_name(self.resource_typing_name)

    def was_generated_by_an_experiment(self) -> bool:
        return self.origin != ResourceOrigin.UPLOADED

    ########################################## KV STORE ######################################

    @final
    def get_kv_store(self) -> Optional[KVStore]:
        if not self.kv_store_path:
            return None

        # Create the KVStore from the path
        kv_store: KVStore = KVStore(self.kv_store_path)

        # Lock the kvstore so the file can't be updated
        kv_store.lock(KVStore.get_full_file_path(file_name=self.id, with_extension=False))
        return kv_store

    def _get_or_create_kv_store(self) -> KVStore:
        """Get the KVStore and create an empty one if it doesn't exist

        :return: [description]
        :rtype: KVStore
        """
        kv_store: Optional[KVStore] = self.get_kv_store()
        if kv_store:
            return kv_store

        # Create the KV store
        kv_store = KVStore.from_filename(self.id)

        self.kv_store_path = kv_store.get_full_path_without_extension()
        return kv_store

    ########################################## JSON ######################################

    def to_json(self, deep: bool = False, **kwargs) -> dict:
        """
        Returns JSON string or dictionnary representation of the model.

        :param stringify: If True, returns a JSON string. Returns a python dictionary otherwise. Defaults to False
        :type stringify: bool
        :param prettify: If True, indent the JSON string. Defaults to False.
        :type prettify: bool
        :return: The representation
        :rtype: dict, str
        """

        _json = super().to_json(deep=deep, **kwargs)

        _json["tags"] = self.get_tags_json()

        if self.fs_node_model:
            _json["fs_node"] = self.fs_node_model.to_json()

        if self.experiment is not None:
            _json["experiment"] = {
                'id': self.experiment.id,
                'title': self.experiment.title,
            }

        resource_typing: Optional[Typing] = TypingManager.get_typing_from_name(self.resource_typing_name)
        if resource_typing:
            _json["resource_type_human_name"] = resource_typing.human_name
            _json["resource_type_short_description"] = resource_typing.short_description
            _json["is_downloadable"] = self.is_downloadable
            _json["type_status"] = resource_typing.get_type_status()

            resource_type: ResourceType = resource_typing.get_type()

            # check if the resource has children resources
            if resource_type is not None and Utils.issubclass(resource_type, ResourceListBase):
                _json["has_children"] = True
            else:
                _json["has_children"] = False
        else:
            _json["type_status"] = TypingStatus.UNAVAILABLE

        return _json

    def data_to_json(self, deep: bool = False, **kwargs) -> dict:
        """
        Returns a JSON string or dictionnary representation of the model data.
        :return: The representation
        :rtype: `dict`
        """
        return {}

    ########################################## OTHER ######################################

    def get_technical_info(self) -> TechnicalInfoDict:
        kv_store = self.get_kv_store()
        if 'technical_info' in kv_store:
            return TechnicalInfoDict.deserialize(kv_store.get('technical_info'))
        return TechnicalInfoDict()

    @property
    def is_downloadable(self) -> bool:
        # the resource is downloadable if it's a file or if the export_to_path is defined
        resource_type: ResourceType = self.get_resource_type()
        return self.fs_node_model is not None or (resource_type is not None and resource_type._is_exportable)
