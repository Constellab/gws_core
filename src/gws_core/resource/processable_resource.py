from peewee import CharField, IntegerField, ModelSelect

from ..core.model.model import Model
from ..model.typing_manager import TypingManager


class ProcessableResource(Model):
    """
    ProcessResource class

    This class manages 1-to-many relationships between processes and child resources (i.e. resources
    generated by related processes)

    Mapping: [1](ProcessableModel) ---(generate)---> [*](Resource)

    Because resources are allowed to be stored in different tables (e.g. after model inheritance), this class
    allows to load the related processes and resources from the proper tables.
    """

    # @Todo:
    # -----
    # * Try to replace `experiment_id` and `resource_id` columns by foreign keys with `lazy_load=False`
    # Do we need the typings ? We do we do if the typing name changed

    process_id = IntegerField(null=False, index=True)
    processable_typing_name = CharField(null=False, index=True)
    resource_id = IntegerField(null=False, index=True)
    resource_typing_name = CharField(null=False, index=True)
    _table_name = "gws_process_resource"

    @property
    def resource(self):
        """
        Returns the resource
        """
        from .resource_model import ResourceModel
        return ResourceModel.get_by_id(self.resource_id)

    @property
    def process(self):
        """
        Returns the process
        """
        return TypingManager.get_object_with_typing_name(self.processable_typing_name, self.process_id)

    @classmethod
    def get_by_id_and_tying_name(cls, resource_id: int, resource_typing_name: str) -> ModelSelect:
        ProcessableResource.get(
            (ProcessableResource.resource_id == resource_id) &
            (ProcessableResource.resource_typing_name == resource_typing_name))

    class Meta:
        indexes = (
            (("process_id", "processable_typing_name",
             "resource_id", "resource_typing_name"), True),
        )
