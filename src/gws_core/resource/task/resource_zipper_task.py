

from gws_core.config.config_params import ConfigParams
from gws_core.config.config_specs import ConfigSpecs
from gws_core.config.param.param_spec import StrParam
from gws_core.entity_navigator.entity_navigator_type import EntityType
from gws_core.impl.file.file import File
from gws_core.io.io_spec import InputSpec, OutputSpec
from gws_core.io.io_specs import InputSpecs, OutputSpecs
from gws_core.model.typing_style import TypingIconType
from gws_core.resource.resource import Resource
from gws_core.resource.resource_loader import ResourceLoader
from gws_core.resource.resource_zipper import ResourceZipper
from gws_core.resource.technical_info import TechnicalInfo
from gws_core.share.shared_dto import ShareEntityCreateMode
from gws_core.task.task import Task
from gws_core.task.task_decorator import task_decorator
from gws_core.task.task_io import TaskInputs, TaskOutputs
from gws_core.user.current_user_service import CurrentUserService
from gws_core.user.user import User


@task_decorator("ResourceZipper", human_name="Zip resource",
                short_description="Zip a resource object to be downloaded by another lab",
                style=File.copy_style(icon_technical_name='folder_zip', icon_type=TypingIconType.MATERIAL_ICON))
class ResourceZipperTask(Task):
    """
    Task to zip a resource object to be downloaded by another lab.
    The zip contains specific information about the resource so it can be imported in another la
    in the correct type.

    The ResourceUnZipper task can be used to unzip the resource.

    If you want to zip a folder, you might want to use the FolderExporter task instead.
    """

    input_name = 'source'
    output_name = 'target'

    input_specs: InputSpecs = InputSpecs({
        "source": InputSpec(Resource, human_name="Resource to zip")
    })

    output_specs: OutputSpecs = OutputSpecs({
        "target": OutputSpec(File, human_name="Zip file")
    })

    config_specs = ConfigSpecs({
        # this config is only set when calling this automatically
        "shared_by_id": StrParam(optional=True, human_name="Id of the user that shared the resource",
                                 visibility=StrParam.PRIVATE_VISIBILITY),
    })

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:

        shared_by_id = params.get_value("shared_by_id")

        shared_by: User = None
        if shared_by_id:
            shared_by = User.get_by_id(shared_by_id)

            if not shared_by:
                raise Exception(f"User with id {shared_by_id} not found")
        else:
            shared_by = CurrentUserService.get_and_check_current_user()

        origin_entity_id = inputs['source'].get_model_id()
        resource_zipper = ResourceZipper(shared_by)
        resource_zipper.add_resource_model(origin_entity_id)
        resource_zipper.close_zip()

        file_path = resource_zipper.get_zip_file_path()

        file = File(file_path)
        # store information about the entity that generated the zip file
        file.add_technical_info(TechnicalInfo("origin_entity_type", EntityType.RESOURCE.value))
        file.add_technical_info(TechnicalInfo("origin_entity_id", origin_entity_id))

        return {"target": file}


@task_decorator("ResourceUnzipper", human_name="Unzip and load resource",
                short_description="Unzip a resource zip and load it as a new resource.",
                style=File.copy_style(icon_technical_name='folder_zip', icon_type=TypingIconType.MATERIAL_ICON))
class ResourceUnZipper(Task):
    """
    Task to unzip a resource zip and load it as a new resource.

    If the zip is a resource zip (generated by the ResourceZipper task for example),
    the resource will be imported in the correct type.

    Otherwise the zip will be unzipped and a Folder resource will be created.
    """

    input_name = 'source'
    output_name = 'target'

    input_specs: InputSpecs = InputSpecs({
        "source": InputSpec(File, human_name="Resource to unzip")
    })

    output_specs: OutputSpecs = OutputSpecs({
        "target": OutputSpec(Resource, human_name="Resource")
    })

    config_specs = ConfigSpecs({})

    resource_loader: ResourceLoader = None

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:

        source: File = inputs['source']

        self.log_info_message("Uncompressing the file")
        self.resource_loader = ResourceLoader.from_compress_file(source.path, ShareEntityCreateMode.NEW_ID)

        self.log_info_message("Loading the resource")
        resource = self.resource_loader.load_resource()

        return {"target": resource}

    def run_after_task(self) -> None:
        self.resource_loader.delete_resource_folder()
