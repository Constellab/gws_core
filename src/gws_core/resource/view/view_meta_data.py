

from typing import Optional, Type

from gws_core.config.config_types import ConfigSpecs
from gws_core.model.typing_style import TypingStyle
from gws_core.resource.view.view_dto import ResourceViewMetadatalDTO

from .view import View
from .view_types import ViewSpecs

METHOD_SPEC_PREFIX: str = 'method_'
VIEW_SPEC_PREFIX: str = 'view_'


class ResourceViewMetaData():
    method_name: str
    view_type: Type[View]
    human_name: str
    short_description: str
    method_specs: ViewSpecs
    default_view: bool
    hide: bool
    style: Optional[TypingStyle]

    def __init__(self, method_name: str, view_type: Type[View],
                 human_name: str, short_description: str,
                 method_specs: ViewSpecs, default_view: bool, hide: bool,
                 style: TypingStyle = None) -> None:
        self.method_name = method_name
        self.view_type = view_type
        self.human_name = human_name
        self.short_description = short_description
        self.method_specs = method_specs
        self.default_view = default_view
        self.hide = hide
        self.style = style

    def clone(self) -> 'ResourceViewMetaData':
        return ResourceViewMetaData(
            self.method_name, self.view_type, self.human_name, self.short_description, self.method_specs, self.default_view,
            self.hide, self.style)

    def to_dto(self) -> ResourceViewMetadatalDTO:
        specs_dict = {key: value.to_dto() for key, value in self._get_view_specs(skip_private=True).items()}
        return ResourceViewMetadatalDTO(
            method_name=self.method_name,
            view_type=self.view_type._type,
            human_name=self.human_name,
            short_description=self.short_description,
            default_view=self.default_view,
            has_config_specs=self.has_config_specs(),
            config_specs=specs_dict,
            style=self.style if self.style else self.view_type._type.get_typing_style()
        )

    def get_view_specs_from_type(self, skip_private: bool = False) -> ConfigSpecs:
        """Return the config spec for a view of a resource. It converts the ViewSpecs to ConfigSpecs by
        replacing the LazyViewParam to ParamSpec.

        If a resource is provided, the LazyViewParam is replaced with the ParamSpec, otherwise, the default
        param spec of the LazyViewParam is used

        """
        specs = {**self.view_type._specs, **self.method_specs}
        config_specs: ConfigSpecs = {}

        for key, value in specs.items():
            # skip the private specs
            if skip_private and value.visibility == 'private':
                continue

            # Replace the lazy spec with the ParamSpec generated by the function
            config_specs[key] = value
        return config_specs

    def has_config_specs(self) -> bool:
        return len(self.method_specs) > 0 or len(self.view_type._specs) > 0
