

from typing import List, cast

from gws_core.apps.app_instance import AppInstance
from gws_core.apps.app_resource import AppResource
from gws_core.core.db.sql_migrator import SqlMigrator
from gws_core.core.utils.logger import Logger
from gws_core.impl.file.file_helper import FileHelper
from gws_core.impl.file.folder import Folder
from gws_core.impl.shell.shell_proxy import ShellProxy
from gws_core.resource.r_field.primitive_r_field import StrRField
from gws_core.resource.resource_decorator import resource_decorator
from gws_core.resource.resource_model import ResourceModel
from gws_core.streamlit.streamlit_app import StreamlitApp


@resource_decorator("StreamlitResource", human_name="Streamlit app",
                    short_description="Streamlit app")
class StreamlitResource(AppResource):
    """
    Resource that contains a streamlit app. https://streamlit.io/.

    This resource is used to generate a stremalit app.

    The app can be configured in different ways:
    - By providing a Appconfig class annotated with @app_decorator.
    - By providing a folder path that contains the app code. The folder must contain a main.py file.
    - By providing the streamlit code as a string.
    - Can be generated by StreamlitAgent

    This app supports the following features:
    - The app can be run in a virtual environment.
    - The app can be run with or without authentication.
    - The app can use resources as input.
    - The app can use parameters.
    """

    # Used when a folder path was provided
    _streamlit_sub_resource_folder_name: str = StrRField()
    # Used when code is passed as a string
    _streamlit_app_code: str = StrRField()

    def get_main_app_file_name(self):
        """
        Get the name of the main app file. This is the file that will be executed when the app is started.

        :return: name of the main app file
        :rtype: str
        """
        return StreamlitApp.MAIN_FILE

    def get_streamlit_app_code(self) -> str:
        """
        Get the streamlit code.

        :return: streamlit code
        :rtype: str
        """
        return self._streamlit_app_code

    def set_streamlit_code(self, streamlit_code: str) -> None:
        """
        Set the streamlit code dynamically.
        The code is stored as a string, the resource need to be re-generated to update the code.

        :param streamlit_code: streamlit code
        :type streamlit_code: str
        """
        self._streamlit_app_code = streamlit_code

    def copy_streamlit_code_path(self, streamlit_app_code_path: str) -> None:
        """
        Set the streamlit code from a file path.
        The file will be read and the content will be copied as the streamlit code.
        Don't use this if you have multiple files for the streamlit app. In this case, use the set_streamlit_folder method.
        The code is stored as a string, the app need to be re-generated to update the code.

        :param streamlit_app_code_path: path to the streamlit code
        :type streamlit_app_code_path: str
        :raises Exception: if the file does not exist
        """
        if not FileHelper.exists_on_os(streamlit_app_code_path):
            raise Exception(f"streamlit_app_code_path {streamlit_app_code_path} does not exist")

        # read the streamlit code from the file
        with open(streamlit_app_code_path, 'r', encoding="utf-8") as file_path:
            self._streamlit_app_code = file_path.read()

    def init_app_instance(self, shell_proxy: ShellProxy, app_id: str, app_name: str,
                          requires_authentification: bool = True) -> AppInstance:
        streamlit_app = StreamlitApp(app_id,
                                     app_name,

                                     shell_proxy,
                                     requires_authentification)

        app_config = self._get_app_config()

        # Add the app code
        if app_config:
            folder_path = self._get_app_config_folder()
            streamlit_app.set_streamlit_folder(folder_path)
        elif self._code_folder_sub_resource_name is not None and len(self._code_folder_sub_resource_name) > 0:
            folder: Folder = cast(Folder, self.get_resource_by_name(self._code_folder_sub_resource_name))
            streamlit_app.set_streamlit_folder(folder.path)
        elif self.get_streamlit_app_code() is not None and len(self.get_streamlit_app_code()) > 0:
            streamlit_app.set_streamlit_code(self.get_streamlit_app_code())
        else:
            raise Exception("The app config, code folder of streamlit code must be set to generate the app.")

        return streamlit_app

    @staticmethod
    def from_code_path(streamlit_app_code_path: str) -> 'StreamlitResource':
        """
        Create a StreamlitResource from a file path.
        The file will be read and the content will be set as the streamlit code.
        Don't use this if you have multiple files for the streamlit app. In this case, use the set_streamlit_folder method.

        :param streamlit_app_code_path: _description_
        :type streamlit_app_code_path: str
        :return: _description_
        :rtype: StreamlitResource
        """
        streamlit_resource = StreamlitResource()
        streamlit_resource.copy_streamlit_code_path(streamlit_app_code_path)
        return streamlit_resource

    @classmethod
    def migrate_streamlit_resources(cls) -> None:
        """method to migrate streamlit resources to use the app config class

        """
        resource_models: List[ResourceModel] = ResourceModel.select().where(
            (ResourceModel.resource_typing_name == cls.get_typing_name())
        )

        for resource_model in resource_models:
            try:
                SqlMigrator.rename_resource_model_r_field(
                    resource_model, '_streamlit_dashboard_typing_name', '_app_config_typing_name')

                SqlMigrator.rename_resource_model_r_field(
                    resource_model, '_streamlit_sub_resource_folder_name', '_code_folder_sub_resource_name')

                resource = cast(StreamlitResource, resource_model.get_resource())
                if resource._app_config_typing_name is not None and 'DASHBOARD' in resource._app_config_typing_name:
                    # If the app config is a dashboard, we set the resource model r field to None
                    # to avoid confusion with the StreamlitResource
                    new_typing_name = resource._app_config_typing_name.replace('DASHBOARD', 'APP')
                    SqlMigrator.set_resource_model_r_field(resource_model, '_app_config_typing_name', new_typing_name)
            except Exception as e:
                Logger.error(f"Error migrating resource {resource_model.id}: {e}")
                continue
