# LICENSE
# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com
from abc import abstractmethod

from gws_core.config.config_params import ConfigParams
from gws_core.config.config_types import ConfigSpecs
from gws_core.impl.live.helper.live_code_helper import LiveCodeHelper
from gws_core.impl.openai.open_ai_chat import OpenAiChat
from gws_core.impl.openai.open_ai_chat_param import OpenAiChatParam
from gws_core.impl.openai.open_ai_helper import OpenAiHelper
from gws_core.impl.text.text import Text
from gws_core.io.io_spec import OutputSpec
from gws_core.task.task import Task
from gws_core.task.task_io import TaskInputs, TaskOutputs


class SmartTaskBase(Task):

    generated_code_output = OutputSpec(
        Text, human_name='Generated code',
        short_description='Modified generated code that can be used in a python live task directly.')

    config_specs: ConfigSpecs = {
        'prompt': OpenAiChatParam()
    }

    @abstractmethod
    def get_context(self, params: ConfigParams, inputs: TaskInputs) -> str:
        pass

    @abstractmethod
    def build_openai_code_inputs(self, params: ConfigParams, inputs: TaskInputs) -> dict:
        pass

    def build_task_outputs(self, params: ConfigParams, inputs: TaskInputs,
                           code_outputs: dict, generated_code: str) -> dict:
        pass

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:

        chat: OpenAiChat = params.get_value('prompt')
        chat.set_context(self.get_context(params, inputs))

        # only call open ai if the last message is from the user
        if chat.last_message_is_user():
            # create the completion
            self.log_info_message('Generating code snippet...')
            chat = OpenAiHelper.call_gpt(chat)

        # save the new config with the new prompt
        params.set_value('prompt', chat)
        params.save_params()

        code = chat.get_last_assistant_message(extract_code=True)
        if code is None:
            raise Exception("No code generated by OpenAI")

        self.log_info_message('Code generated by OpenAI: ' + code)

        # all variable accessible in the generated code
        variables = self.build_openai_code_inputs(params, inputs)

        # execute the live code
        self.log_info_message('Executing the code snippet...')
        outputs = LiveCodeHelper.run_python_code(code, variables)

        return self.build_task_outputs(params, inputs, outputs, code)
