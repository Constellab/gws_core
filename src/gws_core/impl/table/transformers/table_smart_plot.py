# LICENSE
# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com

from typing import List

from gws_core.config.config_types import ConfigParams, ConfigSpecs
from gws_core.config.param.param_spec import TextParam
from gws_core.core.utils.settings import Settings
from gws_core.impl.file.file import File
from gws_core.impl.file.file_helper import FileHelper
from gws_core.impl.live.helper.live_code_helper import LiveCodeHelper
from gws_core.impl.openai.open_ai_helper import GPTMessage, OpenAiHelper
from gws_core.impl.table.table import Table
from gws_core.impl.text.text import Text
from gws_core.io.io_spec import InputSpec, OutputSpec
from gws_core.io.io_spec_helper import InputSpecs, OutputSpecs
from gws_core.task.task import Task
from gws_core.task.task_decorator import task_decorator
from gws_core.task.task_io import TaskInputs, TaskOutputs


@task_decorator("SmartPlot", human_name="Smart plot generator",
                short_description="Generate a plot using an AI (OpenAI).")
class SmartPlot(Task):
    """
This task is still in beta version.

This task uses openAI API to generate python code that generate a chart using matplotlib library. This code is then automaticaaly executed.

/!\ This task does not support table tags.

The data of the table is not transferered to OpenAI, only the provided text.
    """

    input_specs: InputSpecs = {
        'source': InputSpec(Table),
    }
    output_specs: OutputSpecs = {
        'target': OutputSpec(File),
        'generated_code': OutputSpec(Text),
    }
    config_specs: ConfigSpecs = {
        'prompt': TextParam()
    }

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        # prepare the input
        table: Table = inputs["source"]

        prompt = f"""In python, generate a code that takes a Dataframe as input and generate a png graph using matplotlib.
The variable named 'input' contains the dataframe.
The variable named 'output_path' contains the complete path of the output png file destination.
{OpenAiHelper.generate_code_rules}
The dataframe has {table.nb_rows} rows and {table.nb_columns} columns.
Here are the instructions for the graph generation :
{params.get_value('prompt')}"""

        # create the completion
        self.log_info_message('Generating code snippet...')

        context = "Your are a developer assistant that generate code in python to generate charts from dataframes."
        messages: List[GPTMessage] = [{'role': 'user', 'content': prompt}]
        generated_prompt = OpenAiHelper.call_gpt(messages, context)

        self.log_info_message(
            'Response generated by OpenAI: ' + generated_prompt)

        # replace ```python by ``` to be able to execute the code
        code = OpenAiHelper.extract_code_from_gpt_response(generated_prompt)

        # execute the live code
        temp_dir = Settings.make_temp_dir()
        output_path = temp_dir + "/output.png"
        self.log_info_message('Executing the code snippet...')

        # all variable accessible in the generated code
        variables = {"input": table.get_data(), 'output_path': output_path}

        LiveCodeHelper.run_python_code(code, variables)

        if not FileHelper.exists_on_os(output_path) or not FileHelper.is_file(output_path):
            raise Exception("The output must be a file")

        return {'target': File(output_path), 'generated_code': Text(generated_prompt)}
