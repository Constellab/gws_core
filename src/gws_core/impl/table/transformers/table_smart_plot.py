# LICENSE
# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com

from gws_core.config.config_types import ConfigParams, ConfigSpecs
from gws_core.core.utils.settings import Settings
from gws_core.impl.file.file import File
from gws_core.impl.file.file_helper import FileHelper
from gws_core.impl.live.helper.live_code_helper import LiveCodeHelper
from gws_core.impl.openai.open_ai_chat import OpenAiChat
from gws_core.impl.openai.open_ai_chat_param import OpenAiChatParam
from gws_core.impl.openai.open_ai_helper import OpenAiHelper
from gws_core.impl.table.table import Table
from gws_core.impl.text.text import Text
from gws_core.io.io_spec import InputSpec, OutputSpec
from gws_core.io.io_spec_helper import InputSpecs, OutputSpecs
from gws_core.task.task import Task
from gws_core.task.task_decorator import task_decorator
from gws_core.task.task_io import TaskInputs, TaskOutputs


@task_decorator("SmartPlot", human_name="Smart plot generator",
                short_description="Generate a plot using an AI (OpenAI).")
class SmartPlot(Task):
    """
This task is still in beta version.

This task uses openAI API to generate python code that generate a chart using matplotlib library. This code is then automaticaaly executed.

/!\ This task does not support table tags.

The data of the table is not transferered to OpenAI, only the provided text.
    """

    input_specs: InputSpecs = {
        'source': InputSpec(Table),
    }
    output_specs: OutputSpecs = {
        'target': OutputSpec(File, human_name='Plot', short_description='Generated plot file by the AI.'),
        'generated_code': OutputSpec(Text, human_name='Generated code',
                                     short_description='Modified generated code that can be used in a python live task directly.'),
    }
    config_specs: ConfigSpecs = {
        'prompt': OpenAiChatParam()
    }

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        # prepare the input
        table: Table = inputs["source"]

        context = f"""Your are a developer assistant that generate code in python to generate charts from dataframes. In python, generate a code that takes a Dataframe as input and generate a png graph using matplotlib. The variable named 'source' contains the dataframe. The variable named 'output_path' contains the complete path of the output png file destination. {OpenAiHelper.generate_code_rules} The dataframe has {table.nb_rows} rows and {table.nb_columns} columns."""

        chat: OpenAiChat = OpenAiChat.from_json(
            params.get_value('prompt'), context=context)

        # only call open ai if the last message is from the user
        if chat.last_message_is_user():
            # create the completion
            self.log_info_message('Generating code snippet...')
            chat = OpenAiHelper.call_gpt(chat)

        # save the new config with the new prompt
        self.update_config({'prompt': chat.to_json()})

        code = chat.get_last_assistant_message(extract_code=True)
        if code is None:
            raise Exception("No code generated by OpenAI")

        self.log_info_message(
            'Code generated by OpenAI: ' + code)

        # execute the live code
        temp_dir = Settings.make_temp_dir()
        output_path = temp_dir + "/output.png"
        self.log_info_message('Executing the code snippet...')

        # all variable accessible in the generated code
        variables = {"source": table.get_data(), 'output_path': output_path}

        LiveCodeHelper.run_python_code(code, variables)

        if not FileHelper.exists_on_os(output_path) or not FileHelper.is_file(output_path):
            raise Exception("The output must be a file")

        # make the output code compatible with the live task
        live_task_code = f"""
from gws_core import File
import os
source = source.get_data()
# generate the output file path
output_path = os.path.join(working_dir, 'output.png')
{code}
target = File(output_path)"""

        return {'target': File(output_path), 'generated_code': Text(live_task_code)}
