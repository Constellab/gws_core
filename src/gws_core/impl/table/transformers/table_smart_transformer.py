# LICENSE
# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com

import openai
from pandas import DataFrame

from gws_core.config.config_types import ConfigParams, ConfigSpecs
from gws_core.config.param.param_spec import TextParam
from gws_core.core.utils.settings import Settings
from gws_core.impl.file.file import File
from gws_core.impl.file.file_helper import FileHelper
from gws_core.impl.live.helper.live_code_helper import LiveCodeHelper
from gws_core.impl.table.table import Table
from gws_core.impl.text.text import Text
from gws_core.io.io_spec import InputSpec, OutputSpec
from gws_core.io.io_spec_helper import InputSpecs, OutputSpecs
from gws_core.task.task import Task
from gws_core.task.task_decorator import task_decorator
from gws_core.task.task_io import TaskInputs, TaskOutputs

openai.api_key = "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"


@task_decorator("SmartTableTransformer", human_name="Smart table transformer",
                short_description="Table transformer that uses AI .")
class TableSmartTransformer(Task):
    """
    Python live tasks allow to execute any Python code snippets on the fly.

    Live tasks are fast and efficient tools to develop, test, use and share code snippets.

    > **Warning**: It is recommended to use code snippets comming from trusted sources.
    """

    input_specs: InputSpecs = {
        'source': InputSpec(Table, is_optional=True),
    }
    output_specs: OutputSpecs = {
        'target': OutputSpec(Table, sub_class=True, is_optional=True),
        'generated_code': OutputSpec(Text),
    }
    config_specs: ConfigSpecs = {
        'prompt': TextParam()
    }

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        prompt = f"""In python, generate a code that takes a Dataframe as input transform it and return a Dataframe as output.
The input named 'input' is the dataframe.
The transformed dataframe must be assigned to a variable called 'output'.
Don't prompt the method signature, only the code, without comments.
Generate a code that can be directly executed in python.
You can use pandas or numpy libraries.
Here is the transformation :
{params.get_value('prompt')}"""

        # create the completion
        self.log_info_message('Generating code snippet...')
        completion = openai.Completion.create(model="text-davinci-003",
                                              prompt=prompt, max_tokens=3000)

        # print the completion
        generated_code = completion.choices[0].text

        self.log_info_message(
            'Code snippet generated by OpenAI: ' + generated_code)

        # execute the live code
        self.log_info_message('Executing the code snippet...')
        input = inputs.get("source", None)
        init_globals = {'self': self, "input": input, **globals()}
        outputs = LiveCodeHelper.run_python_code(generated_code, init_globals)
        output = outputs.get("output", None)

        if not isinstance(output, DataFrame):
            raise Exception("The output must be a pandas DataFrame")

        result = Table(output)
        return {'target': result, 'generated_code': generated_code}


@task_decorator("SmartPlot", human_name="Smart plot generator",
                short_description="Table transformer that uses AI .")
class SmartPlot(Task):
    """
    Python live tasks allow to execute any Python code snippets on the fly.

    Live tasks are fast and efficient tools to develop, test, use and share code snippets.

    > **Warning**: It is recommended to use code snippets comming from trusted sources.
    """

    input_specs: InputSpecs = {
        'source': InputSpec(Table),
    }
    output_specs: OutputSpecs = {
        'target': OutputSpec(File),
        'generated_code': OutputSpec(Text),
    }
    config_specs: ConfigSpecs = {
        'prompt': TextParam()
    }

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        prompt = f"""In python, generate a code that takes a Dataframe as input and generate a png graph using matplotlib.
The variable named 'input' contains the dataframe.
The variable named 'output_path' contains the path of the output png file where you need to write.
Don't prompt the method signature, only the code.
Generate the code between ```.
Here are the instructions for the graph generation :
{params.get_value('prompt')}"""

        # create the completion
        self.log_info_message('Generating code snippet...')
        # completion = openai.Completion.create(model="code-davinci-002",
        #                                       prompt=prompt, max_tokens=3000)

        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompt},
                # {"role": "user", "content": "Who won the world series in 2020?"},
                # {"role": "assistant",
                #  "content": "The Los Angeles Dodgers won the World Series in 2020."},
                # {"role": "user", "content": "Where was it played?"}
            ]
        )

        # print the completion
        generated_prompt = completion.choices[0].message.content
        # generated_prompt = completion.choices[0].text

        self.log_info_message(
            'Code snippet generated by OpenAI: ' + generated_prompt)

        # replace ```python by ``` to be able to execute the code
        generated_prompt = generated_prompt.replace("```python", "```")
        code = generated_prompt.split("```")[1]

        # execute the live code
        temp_dir = Settings.make_temp_dir()
        output_path = temp_dir + "/output.png"
        self.log_info_message('Executing the code snippet...')

        # prepare the input
        table: Table = inputs["source"]
        input: DataFrame = table.get_data()

        # all variable accessible in the generated code
        variables = {"input": input, 'output_path': output_path}

        LiveCodeHelper.run_python_code(code, variables)

        if not FileHelper.exists_on_os(output_path) or not FileHelper.is_file(output_path):
            raise Exception("The output must be a file")

        return {'target': File(output_path), 'generated_code': Text(generated_prompt)}
