# LICENSE
# This software is the exclusive property of Gencovery SAS.
# The use and distribution of this software is prohibited without the prior consent of Gencovery SAS.
# About us: https://gencovery.com


from pandas import DataFrame

from gws_core.config.config_types import ConfigParams, ConfigSpecs
from gws_core.config.param.param_spec import BoolParam, TextParam
from gws_core.impl.live.helper.live_code_helper import LiveCodeHelper
from gws_core.impl.openai.open_ai_chat import OpenAiChat
from gws_core.impl.openai.open_ai_chat_param import OpenAiChatParam
from gws_core.impl.openai.open_ai_helper import OpenAiHelper
from gws_core.impl.table.table import Table
from gws_core.impl.text.text import Text
from gws_core.io.io_spec import InputSpec, OutputSpec
from gws_core.io.io_spec_helper import InputSpecs, OutputSpecs
from gws_core.task.task import Task
from gws_core.task.task_decorator import task_decorator
from gws_core.task.task_io import TaskInputs, TaskOutputs


@task_decorator("SmartTableTransformer", human_name="Smart table transformer",
                short_description="Table transformer that uses AI  (OpenAI).")
class TableSmartTransformer(Task):
    """
This task is still in beta version.

This task uses openAI API to generate python code that transforms a dataframe. This code is then automatically executed.

/!\ This task does not support table tags.

The data of the table is not transferered to OpenAI, only the provided text.
    """

    input_specs: InputSpecs = {
        'source': InputSpec(Table),
    }
    output_specs: OutputSpecs = {
        'target': OutputSpec(Table),
        'generated_code': OutputSpec(Text, human_name='Generated code',
                                     short_description='Modified Generated code that can be used in a python live task directly.'),
    }
    config_specs: ConfigSpecs = {
        'prompt': OpenAiChatParam(),
        "keep_columns_tags": BoolParam(default_value=False, human_name="Keep columns tags",
                                       short_description="If true, the columns tags are kept in the output table for columns that have the same names."),
        "keep_rows_tags": BoolParam(default_value=False, human_name="Keep rows tags",
                                    short_description="If true, the rows tags are kept in the output table for rows that have the same names."),
    }

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:

        # get the table
        source: Table = inputs["source"]

        context = f"Your are a developer assistant that generate code in python to transform a dataframe. The variable named 'source' contains the dataframe. The transformed dataframe must be assigned to a variable named 'target'. {OpenAiHelper.generate_code_rules} The dataframe has {source.nb_rows} rows and {source.nb_columns} columns."

        chat: OpenAiChat = OpenAiChat.from_json(
            params.get_value("prompt"), context=context)

        # only call open ai if the last message is from the user
        if chat.last_message_is_user():
            # create the completion
            self.log_info_message('Generating code snippet...')

            chat = OpenAiHelper.call_gpt(chat)

        # save the new config with the new prompt
        self.update_config({'prompt': chat.to_json()})

        code = chat.get_last_assistant_message(extract_code=True)
        if code is None:
            raise Exception("No code generated by OpenAI")

        self.log_info_message(
            'Code generated by OpenAI: ' + code)

        # execute the live code
        self.log_info_message('Executing the code snippet...')
        init_globals = {'self': self, "source": source.get_data(), **globals()}
        outputs = LiveCodeHelper.run_python_code(code, init_globals)
        output = outputs.get("target", None)

        if output is None:
            raise Exception("The code did not generate any output")

        if not isinstance(output, DataFrame):
            raise Exception("The output must be a pandas DataFrame")

        # make the output code compatible with the live task
        live_task_code = f"""
from gws_core import Table
# keep the original table
source_table = source
# retrieve the dataframe for the generated code
source = source.get_data()
{code}
# convert the dataframe to a table
target = Table(target)"""

        result = Table(output)

        if params.get_value("keep_columns_tags"):
            result.copy_column_tags_by_name(source)
            live_task_code += "\ntarget.copy_column_tags_by_name(source_table)"

        if params.get_value("keep_rows_tags"):
            result.copy_row_tags_by_name(source)
            live_task_code += "\ntarget.copy_row_tags_by_name(source_table)"

        return {'target': result, 'generated_code': Text(live_task_code)}
