# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import \
    wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2

from . import biolectorxtremotecontrol_pb2 as biolectorxtremotecontrol__pb2


class BioLectorXtRemoteControlStub(object):
    """=========================== Services ===========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProtocols = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetProtocols',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetProtocolListResponse.FromString,
        )
        self.UploadProtocol = channel.stream_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/UploadProtocol',
            request_serializer=biolectorxtremotecontrol__pb2.FileChunk.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.StdResponse.FromString,
        )
        self.DownloadProtocol = channel.unary_stream(
            '/biolectorxt.api.BioLectorXtRemoteControl/DownloadProtocol',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.FileChunk.FromString,
        )
        self.DeleteProtocol = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/DeleteProtocol',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.StdResponse.FromString,
        )
        self.GetExperimentList = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetExperimentList',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetExperimentListResponse.FromString,
        )
        self.DownloadExperiment = channel.unary_stream(
            '/biolectorxt.api.BioLectorXtRemoteControl/DownloadExperiment',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.FileChunk.FromString,
        )
        self.DeleteExperiment = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/DeleteExperiment',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.StdResponse.FromString,
        )
        self.UpdateLiveExperiment = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/UpdateLiveExperiment',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.UpdateRunningExperimentResponse.FromString,
        )
        self.StartProtocol = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/StartProtocol',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.StartProtocolResponse.FromString,
        )
        self.StopProtocol = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/StopProtocol',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.StopProtocolResponse.FromString,
        )
        self.PauseProtocol = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/PauseProtocol',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.ContinueProtocol = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/ContinueProtocol',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.ContinueProtocolResponse.FromString,
        )
        self.GetCurrentProgress = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetCurrentProgress',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetCurrentProgressResponse.FromString,
        )
        self.GetTemperatureControlStatus = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetTemperatureControlStatus',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetTemperatureControlStatusResponse.FromString,
        )
        self.SetTemperatureSetpoint = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetTemperatureSetpoint',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetTemperatureControlEnabled = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetTemperatureControlEnabled',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.GetShakerControlStatus = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetShakerControlStatus',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetShakerControlStatusResponse.FromString,
        )
        self.SetShakerSetpoint = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetShakerSetpoint',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.UInt32Value.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetShakerEnabled = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetShakerEnabled',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.OpenCover = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/OpenCover',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.CloseCover = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/CloseCover',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.GetCoverState = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetCoverState',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetCoverStateResponse.FromString,
        )
        self.GetActualGassingMode = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetActualGassingMode',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetActualGassingModeResponse.FromString,
        )
        self.GetGassingFlowrate = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetGassingFlowrate',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString,
        )
        self.SetGassingFlowrate = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetGassingFlowrate',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.GetTargetGasPercentage = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetTargetGasPercentage',
            request_serializer=biolectorxtremotecontrol__pb2.GetGasPercentageRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString,
        )
        self.GetActualGasPercentage = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetActualGasPercentage',
            request_serializer=biolectorxtremotecontrol__pb2.GetGasPercentageRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString,
        )
        self.SetTargetGassPercentage = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetTargetGassPercentage',
            request_serializer=biolectorxtremotecontrol__pb2.SetTargetGasPercentageRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.GetHumidityControlState = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetHumidityControlState',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
        )
        self.SetHumidityControlState = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetHumidityControlState',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.GetCultivationValues = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetCultivationValues',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetCultivationValuesResponse.FromString,
        )
        self.GetPhControlStatus = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetPhControlStatus',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetPhControlStatusResponse.FromString,
        )
        self.SetTargetPh = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetTargetPh',
            request_serializer=biolectorxtremotecontrol__pb2.SetTargetPhRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetPhControlState = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetPhControlState',
            request_serializer=biolectorxtremotecontrol__pb2.SetPhControlStateRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetPhControlParams = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetPhControlParams',
            request_serializer=biolectorxtremotecontrol__pb2.SetPhControlParamsRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.StartFeed = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/StartFeed',
            request_serializer=biolectorxtremotecontrol__pb2.FeedRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.StopFeed = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/StopFeed',
            request_serializer=biolectorxtremotecontrol__pb2.FeedRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetFeedControlParams = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetFeedControlParams',
            request_serializer=biolectorxtremotecontrol__pb2.SetFeedControlParamsRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.RunFeedPulse = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/RunFeedPulse',
            request_serializer=biolectorxtremotecontrol__pb2.RunFeedPulseRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.AddComment = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/AddComment',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetLAMWorkMode = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetLAMWorkMode',
            request_serializer=biolectorxtremotecontrol__pb2.SetLAMWorkModeRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetLAMFrequency = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetLAMFrequency',
            request_serializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SetLAMRelativePowers = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/SetLAMRelativePowers',
            request_serializer=biolectorxtremotecontrol__pb2.SetLAMRelativePowersRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.GetLAMStatus = channel.unary_unary(
            '/biolectorxt.api.BioLectorXtRemoteControl/GetLAMStatus',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.GetLAMStatusResponse.FromString,
        )
        self.StatusUpdateStream = channel.unary_stream(
            '/biolectorxt.api.BioLectorXtRemoteControl/StatusUpdateStream',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=biolectorxtremotecontrol__pb2.StatusUpdateStreamResponse.FromString,
        )


class BioLectorXtRemoteControlServicer(object):
    """=========================== Services ===========================
    """

    def GetProtocols(self, request, context):
        """Get the list of all protocols
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadProtocol(self, request_iterator, context):
        """Upload a protocol file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadProtocol(self, request, context):
        """Download a protocol file based on ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProtocol(self, request, context):
        """Delete protocol by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentList(self, request, context):
        """Get the list of all conducted experiments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadExperiment(self, request, context):
        """Download results for a particular experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExperiment(self, request, context):
        """Delete experiment results from the SD card
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLiveExperiment(self, request, context):
        """Update parameters for a running experiment - json string passed as parameter
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartProtocol(self, request, context):
        """Start protocol by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopProtocol(self, request, context):
        """Stop running protocol
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseProtocol(self, request, context):
        """Pause protocol and stop / continue shaking (true / false)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContinueProtocol(self, request, context):
        """Continue protocol
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentProgress(self, request, context):
        """Get current progress
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemperatureControlStatus(self, request, context):
        """Temperature calls
        Get temperature control status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTemperatureSetpoint(self, request, context):
        """Set target temperature - float value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTemperatureControlEnabled(self, request, context):
        """Start/stop temperature control
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShakerControlStatus(self, request, context):
        """Shaker calls
        Get shaker status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetShakerSetpoint(self, request, context):
        """Set shaker RPM
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetShakerEnabled(self, request, context):
        """Start/stop shaker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenCover(self, request, context):
        """Cover operations
        Open cover
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseCover(self, request, context):
        """Close cover
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoverState(self, request, context):
        """Get cover state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActualGassingMode(self, request, context):
        """Gassing calls
        Get actual gassing mode for a well
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGassingFlowrate(self, request, context):
        """Get target gassing flowrate for a well
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGassingFlowrate(self, request, context):
        """Set target gassing flowrate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTargetGasPercentage(self, request, context):
        """Get target gas percentage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActualGasPercentage(self, request, context):
        """Get actual gas percentage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTargetGassPercentage(self, request, context):
        """Set target gas percentage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHumidityControlState(self, request, context):
        """Get humidity control state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHumidityControlState(self, request, context):
        """Set humidity control state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCultivationValues(self, request, context):
        """Get cultivation values
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPhControlStatus(self, request, context):
        """Get pH control status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTargetPh(self, request, context):
        """Set target pH
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPhControlState(self, request, context):
        """Set pH control state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPhControlParams(self, request, context):
        """Set pH control params
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartFeed(self, request, context):
        """Microfluidic feeding
        Start feed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopFeed(self, request, context):
        """Stop feed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFeedControlParams(self, request, context):
        """Set feed control params
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunFeedPulse(self, request, context):
        """Run feed pulse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddComment(self, request, context):
        """Add comment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLAMWorkMode(self, request, context):
        """LAM functions
        Set LAM work mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLAMFrequency(self, request, context):
        """Set LAM frequency
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLAMRelativePowers(self, request, context):
        """Set LAM relative powers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLAMStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StatusUpdateStream(self, request, context):
        """Streaming calls
        Status update stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BioLectorXtRemoteControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetProtocols': grpc.unary_unary_rpc_method_handler(
            servicer.GetProtocols,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetProtocolListResponse.SerializeToString,
        ),
        'UploadProtocol': grpc.stream_unary_rpc_method_handler(
            servicer.UploadProtocol,
            request_deserializer=biolectorxtremotecontrol__pb2.FileChunk.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.StdResponse.SerializeToString,
        ),
        'DownloadProtocol': grpc.unary_stream_rpc_method_handler(
            servicer.DownloadProtocol,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.FileChunk.SerializeToString,
        ),
        'DeleteProtocol': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteProtocol,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.StdResponse.SerializeToString,
        ),
        'GetExperimentList': grpc.unary_unary_rpc_method_handler(
            servicer.GetExperimentList,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetExperimentListResponse.SerializeToString,
        ),
        'DownloadExperiment': grpc.unary_stream_rpc_method_handler(
            servicer.DownloadExperiment,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.FileChunk.SerializeToString,
        ),
        'DeleteExperiment': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteExperiment,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.StdResponse.SerializeToString,
        ),
        'UpdateLiveExperiment': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateLiveExperiment,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.UpdateRunningExperimentResponse.SerializeToString,
        ),
        'StartProtocol': grpc.unary_unary_rpc_method_handler(
            servicer.StartProtocol,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.StartProtocolResponse.SerializeToString,
        ),
        'StopProtocol': grpc.unary_unary_rpc_method_handler(
            servicer.StopProtocol,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.StopProtocolResponse.SerializeToString,
        ),
        'PauseProtocol': grpc.unary_unary_rpc_method_handler(
            servicer.PauseProtocol,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'ContinueProtocol': grpc.unary_unary_rpc_method_handler(
            servicer.ContinueProtocol,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.ContinueProtocolResponse.SerializeToString,
        ),
        'GetCurrentProgress': grpc.unary_unary_rpc_method_handler(
            servicer.GetCurrentProgress,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetCurrentProgressResponse.SerializeToString,
        ),
        'GetTemperatureControlStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetTemperatureControlStatus,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetTemperatureControlStatusResponse.SerializeToString,
        ),
        'SetTemperatureSetpoint': grpc.unary_unary_rpc_method_handler(
            servicer.SetTemperatureSetpoint,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetTemperatureControlEnabled': grpc.unary_unary_rpc_method_handler(
            servicer.SetTemperatureControlEnabled,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetShakerControlStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetShakerControlStatus,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetShakerControlStatusResponse.SerializeToString,
        ),
        'SetShakerSetpoint': grpc.unary_unary_rpc_method_handler(
            servicer.SetShakerSetpoint,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.UInt32Value.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetShakerEnabled': grpc.unary_unary_rpc_method_handler(
            servicer.SetShakerEnabled,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'OpenCover': grpc.unary_unary_rpc_method_handler(
            servicer.OpenCover,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'CloseCover': grpc.unary_unary_rpc_method_handler(
            servicer.CloseCover,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetCoverState': grpc.unary_unary_rpc_method_handler(
            servicer.GetCoverState,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetCoverStateResponse.SerializeToString,
        ),
        'GetActualGassingMode': grpc.unary_unary_rpc_method_handler(
            servicer.GetActualGassingMode,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetActualGassingModeResponse.SerializeToString,
        ),
        'GetGassingFlowrate': grpc.unary_unary_rpc_method_handler(
            servicer.GetGassingFlowrate,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
        ),
        'SetGassingFlowrate': grpc.unary_unary_rpc_method_handler(
            servicer.SetGassingFlowrate,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetTargetGasPercentage': grpc.unary_unary_rpc_method_handler(
            servicer.GetTargetGasPercentage,
            request_deserializer=biolectorxtremotecontrol__pb2.GetGasPercentageRequest.FromString,
            response_serializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
        ),
        'GetActualGasPercentage': grpc.unary_unary_rpc_method_handler(
            servicer.GetActualGasPercentage,
            request_deserializer=biolectorxtremotecontrol__pb2.GetGasPercentageRequest.FromString,
            response_serializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
        ),
        'SetTargetGassPercentage': grpc.unary_unary_rpc_method_handler(
            servicer.SetTargetGassPercentage,
            request_deserializer=biolectorxtremotecontrol__pb2.SetTargetGasPercentageRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetHumidityControlState': grpc.unary_unary_rpc_method_handler(
            servicer.GetHumidityControlState,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
        ),
        'SetHumidityControlState': grpc.unary_unary_rpc_method_handler(
            servicer.SetHumidityControlState,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetCultivationValues': grpc.unary_unary_rpc_method_handler(
            servicer.GetCultivationValues,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetCultivationValuesResponse.SerializeToString,
        ),
        'GetPhControlStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetPhControlStatus,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetPhControlStatusResponse.SerializeToString,
        ),
        'SetTargetPh': grpc.unary_unary_rpc_method_handler(
            servicer.SetTargetPh,
            request_deserializer=biolectorxtremotecontrol__pb2.SetTargetPhRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetPhControlState': grpc.unary_unary_rpc_method_handler(
            servicer.SetPhControlState,
            request_deserializer=biolectorxtremotecontrol__pb2.SetPhControlStateRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetPhControlParams': grpc.unary_unary_rpc_method_handler(
            servicer.SetPhControlParams,
            request_deserializer=biolectorxtremotecontrol__pb2.SetPhControlParamsRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'StartFeed': grpc.unary_unary_rpc_method_handler(
            servicer.StartFeed,
            request_deserializer=biolectorxtremotecontrol__pb2.FeedRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'StopFeed': grpc.unary_unary_rpc_method_handler(
            servicer.StopFeed,
            request_deserializer=biolectorxtremotecontrol__pb2.FeedRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetFeedControlParams': grpc.unary_unary_rpc_method_handler(
            servicer.SetFeedControlParams,
            request_deserializer=biolectorxtremotecontrol__pb2.SetFeedControlParamsRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'RunFeedPulse': grpc.unary_unary_rpc_method_handler(
            servicer.RunFeedPulse,
            request_deserializer=biolectorxtremotecontrol__pb2.RunFeedPulseRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'AddComment': grpc.unary_unary_rpc_method_handler(
            servicer.AddComment,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetLAMWorkMode': grpc.unary_unary_rpc_method_handler(
            servicer.SetLAMWorkMode,
            request_deserializer=biolectorxtremotecontrol__pb2.SetLAMWorkModeRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetLAMFrequency': grpc.unary_unary_rpc_method_handler(
            servicer.SetLAMFrequency,
            request_deserializer=google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'SetLAMRelativePowers': grpc.unary_unary_rpc_method_handler(
            servicer.SetLAMRelativePowers,
            request_deserializer=biolectorxtremotecontrol__pb2.SetLAMRelativePowersRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetLAMStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetLAMStatus,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.GetLAMStatusResponse.SerializeToString,
        ),
        'StatusUpdateStream': grpc.unary_stream_rpc_method_handler(
            servicer.StatusUpdateStream,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=biolectorxtremotecontrol__pb2.StatusUpdateStreamResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'biolectorxt.api.BioLectorXtRemoteControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class BioLectorXtRemoteControl(object):
    """=========================== Services ===========================
    """

    @staticmethod
    def GetProtocols(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/GetProtocols',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetProtocolListResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadProtocol(request_iterator,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target,
                                              '/biolectorxt.api.BioLectorXtRemoteControl/UploadProtocol',
                                              biolectorxtremotecontrol__pb2.FileChunk.SerializeToString,
                                              biolectorxtremotecontrol__pb2.StdResponse.FromString, options,
                                              channel_credentials, insecure, call_credentials, compression,
                                              wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadProtocol(request,
                         target,
                         options=(),
                         channel_credentials=None,
                         call_credentials=None,
                         insecure=False,
                         compression=None,
                         wait_for_ready=None,
                         timeout=None,
                         metadata=None):
        return grpc.experimental.unary_stream(request, target,
                                              '/biolectorxt.api.BioLectorXtRemoteControl/DownloadProtocol',
                                              google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                                              biolectorxtremotecontrol__pb2.FileChunk.FromString, options,
                                              channel_credentials, insecure, call_credentials, compression,
                                              wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteProtocol(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/DeleteProtocol',
                                             google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                                             biolectorxtremotecontrol__pb2.StdResponse.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExperimentList(request,
                          target,
                          options=(),
                          channel_credentials=None,
                          call_credentials=None,
                          insecure=False,
                          compression=None,
                          wait_for_ready=None,
                          timeout=None,
                          metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetExperimentList',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetExperimentListResponse.FromString,
                                             options, channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadExperiment(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_stream(request, target,
                                              '/biolectorxt.api.BioLectorXtRemoteControl/DownloadExperiment',
                                              google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                                              biolectorxtremotecontrol__pb2.FileChunk.FromString, options,
                                              channel_credentials, insecure, call_credentials, compression,
                                              wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteExperiment(request,
                         target,
                         options=(),
                         channel_credentials=None,
                         call_credentials=None,
                         insecure=False,
                         compression=None,
                         wait_for_ready=None,
                         timeout=None,
                         metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/DeleteExperiment',
                                             google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                                             biolectorxtremotecontrol__pb2.StdResponse.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateLiveExperiment(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/UpdateLiveExperiment',
                                             google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                                             biolectorxtremotecontrol__pb2.UpdateRunningExperimentResponse.FromString,
                                             options, channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def StartProtocol(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/StartProtocol',
                                             google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                                             biolectorxtremotecontrol__pb2.StartProtocolResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopProtocol(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/StopProtocol',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.StopProtocolResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PauseProtocol(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/PauseProtocol',
                                             google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContinueProtocol(request,
                         target,
                         options=(),
                         channel_credentials=None,
                         call_credentials=None,
                         insecure=False,
                         compression=None,
                         wait_for_ready=None,
                         timeout=None,
                         metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/ContinueProtocol',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.ContinueProtocolResponse.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentProgress(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetCurrentProgress',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetCurrentProgressResponse.FromString,
                                             options, channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTemperatureControlStatus(request,
                                    target,
                                    options=(),
                                    channel_credentials=None,
                                    call_credentials=None,
                                    insecure=False,
                                    compression=None,
                                    wait_for_ready=None,
                                    timeout=None,
                                    metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/GetTemperatureControlStatus',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString, biolectorxtremotecontrol__pb2.
            GetTemperatureControlStatusResponse.FromString, options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTemperatureSetpoint(request,
                               target,
                               options=(),
                               channel_credentials=None,
                               call_credentials=None,
                               insecure=False,
                               compression=None,
                               wait_for_ready=None,
                               timeout=None,
                               metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetTemperatureSetpoint',
                                             google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTemperatureControlEnabled(request,
                                     target,
                                     options=(),
                                     channel_credentials=None,
                                     call_credentials=None,
                                     insecure=False,
                                     compression=None,
                                     wait_for_ready=None,
                                     timeout=None,
                                     metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetTemperatureControlEnabled',
                                             google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetShakerControlStatus(request,
                               target,
                               options=(),
                               channel_credentials=None,
                               call_credentials=None,
                               insecure=False,
                               compression=None,
                               wait_for_ready=None,
                               timeout=None,
                               metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetShakerControlStatus',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetShakerControlStatusResponse.FromString,
                                             options, channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetShakerSetpoint(request,
                          target,
                          options=(),
                          channel_credentials=None,
                          call_credentials=None,
                          insecure=False,
                          compression=None,
                          wait_for_ready=None,
                          timeout=None,
                          metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetShakerSetpoint',
                                             google_dot_protobuf_dot_wrappers__pb2.UInt32Value.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetShakerEnabled(request,
                         target,
                         options=(),
                         channel_credentials=None,
                         call_credentials=None,
                         insecure=False,
                         compression=None,
                         wait_for_ready=None,
                         timeout=None,
                         metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetShakerEnabled',
                                             google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenCover(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/OpenCover',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseCover(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/CloseCover',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCoverState(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/GetCoverState',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetCoverStateResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActualGassingMode(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetActualGassingMode',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetActualGassingModeResponse.FromString,
                                             options, channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGassingFlowrate(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetGassingFlowrate',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGassingFlowrate(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetGassingFlowrate',
                                             google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTargetGasPercentage(request,
                               target,
                               options=(),
                               channel_credentials=None,
                               call_credentials=None,
                               insecure=False,
                               compression=None,
                               wait_for_ready=None,
                               timeout=None,
                               metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/GetTargetGasPercentage',
            biolectorxtremotecontrol__pb2.GetGasPercentageRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString, options, channel_credentials, insecure,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActualGasPercentage(request,
                               target,
                               options=(),
                               channel_credentials=None,
                               call_credentials=None,
                               insecure=False,
                               compression=None,
                               wait_for_ready=None,
                               timeout=None,
                               metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/GetActualGasPercentage',
            biolectorxtremotecontrol__pb2.GetGasPercentageRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.FloatValue.FromString, options, channel_credentials, insecure,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTargetGassPercentage(request,
                                target,
                                options=(),
                                channel_credentials=None,
                                call_credentials=None,
                                insecure=False,
                                compression=None,
                                wait_for_ready=None,
                                timeout=None,
                                metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/SetTargetGassPercentage',
            biolectorxtremotecontrol__pb2.SetTargetGasPercentageRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString, options, channel_credentials, insecure,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHumidityControlState(request,
                                target,
                                options=(),
                                channel_credentials=None,
                                call_credentials=None,
                                insecure=False,
                                compression=None,
                                wait_for_ready=None,
                                timeout=None,
                                metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetHumidityControlState',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetHumidityControlState(request,
                                target,
                                options=(),
                                channel_credentials=None,
                                call_credentials=None,
                                insecure=False,
                                compression=None,
                                wait_for_ready=None,
                                timeout=None,
                                metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetHumidityControlState',
                                             google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCultivationValues(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetCultivationValues',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetCultivationValuesResponse.FromString,
                                             options, channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPhControlStatus(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/GetPhControlStatus',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetPhControlStatusResponse.FromString,
                                             options, channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTargetPh(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/SetTargetPh',
                                             biolectorxtremotecontrol__pb2.SetTargetPhRequest.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPhControlState(request,
                          target,
                          options=(),
                          channel_credentials=None,
                          call_credentials=None,
                          insecure=False,
                          compression=None,
                          wait_for_ready=None,
                          timeout=None,
                          metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/SetPhControlState',
            biolectorxtremotecontrol__pb2.SetPhControlStateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString, options, channel_credentials, insecure,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPhControlParams(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/SetPhControlParams',
            biolectorxtremotecontrol__pb2.SetPhControlParamsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString, options, channel_credentials, insecure,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartFeed(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/StartFeed',
                                             biolectorxtremotecontrol__pb2.FeedRequest.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopFeed(request,
                 target,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 insecure=False,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/StopFeed',
                                             biolectorxtremotecontrol__pb2.FeedRequest.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFeedControlParams(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/SetFeedControlParams',
            biolectorxtremotecontrol__pb2.SetFeedControlParamsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString, options, channel_credentials, insecure,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunFeedPulse(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/RunFeedPulse',
                                             biolectorxtremotecontrol__pb2.RunFeedPulseRequest.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddComment(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/AddComment',
                                             google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLAMWorkMode(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetLAMWorkMode',
                                             biolectorxtremotecontrol__pb2.SetLAMWorkModeRequest.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLAMFrequency(request,
                        target,
                        options=(),
                        channel_credentials=None,
                        call_credentials=None,
                        insecure=False,
                        compression=None,
                        wait_for_ready=None,
                        timeout=None,
                        metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/biolectorxt.api.BioLectorXtRemoteControl/SetLAMFrequency',
                                             google_dot_protobuf_dot_wrappers__pb2.FloatValue.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString, options,
                                             channel_credentials, insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLAMRelativePowers(request,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/biolectorxt.api.BioLectorXtRemoteControl/SetLAMRelativePowers',
            biolectorxtremotecontrol__pb2.SetLAMRelativePowersRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString, options, channel_credentials, insecure,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLAMStatus(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biolectorxt.api.BioLectorXtRemoteControl/GetLAMStatus',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             biolectorxtremotecontrol__pb2.GetLAMStatusResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StatusUpdateStream(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_stream(request, target,
                                              '/biolectorxt.api.BioLectorXtRemoteControl/StatusUpdateStream',
                                              google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                              biolectorxtremotecontrol__pb2.StatusUpdateStreamResponse.FromString,
                                              options, channel_credentials, insecure, call_credentials, compression,
                                              wait_for_ready, timeout, metadata)
