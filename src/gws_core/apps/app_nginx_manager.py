import atexit
import os
import subprocess
from typing import Dict, List, Optional

from gws_core.apps.app_nginx_service import AppNginxServiceInfo
from gws_core.core.classes.observer.message_observer import \
    LoggerMessageObserver
from gws_core.core.utils.logger import Logger
from gws_core.core.utils.settings import Settings
from gws_core.impl.shell.shell_proxy import ShellProxy


class AppNginxManager:
    """ Singleton to manage the nginx service to run apps.
    It handles the registration of services, generation of nginx configuration,
    and starting/stopping the nginx server.
    """

    _instance: Optional['AppNginxManager'] = None
    _nginx_config_dir: str = None
    _services: Dict[str, AppNginxServiceInfo] = None

    _NGINX_CONF_FILENAME = 'nginx.conf'

    NGINX_TEMPLATE = """
# Nginx configuration template for apps
# This file is automatically generated by NginxManager

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # config for logging
    access_log [NGINX_CONFIG_DIR]/nginx_access.log;
    error_log [NGINX_CONFIG_DIR]/nginx_error.log;

    # Fix for long server names
    server_names_hash_bucket_size 128;

    # This will be replaced with the actual server blocks
    [SERVERS]

}
"""

    def __init__(self):
        self._nginx_config_dir = Settings.make_temp_dir()
        self._services = {}

    @classmethod
    def get_instance(cls) -> 'AppNginxManager':
        """Get the global nginx manager instance"""
        if not cls._instance:
            cls._instance = cls()
        return cls._instance

    @classmethod
    def init(cls) -> None:
        """Initialize the NginxManager instance"""
        nginx_manager = cls.get_instance()
        if nginx_manager.nginx_is_running():
            Logger.info("Nginx is running, stopping it.")
            nginx_manager.stop()

    def register_services(self, services: List[AppNginxServiceInfo]) -> None:
        """Register a service and update nginx configuration"""
        for service in services:
            self._services[service.service_id] = service
            Logger.debug(f"Registered service: {service.service_id}, server name {service.server_name}")

        self.start_or_reload()

    def unregister_services(self, service_ids: List[str]) -> None:
        """Unregister a service and update nginx configuration"""
        for service_id in service_ids:
            if service_id in self._services:
                del self._services[service_id]
                Logger.debug(f"Unregistered service: {service_id}")

        if self._services:
            self.start_or_reload()
        else:
            # if no services left, stop nginx
            self.stop()

    def get_services(self) -> List[AppNginxServiceInfo]:
        """Get all registered services"""
        return list(self._services.values())

    def get_service(self, name: str) -> Optional[AppNginxServiceInfo]:
        """Get a specific service by name"""
        return self._services.get(name)

    def start_or_reload(self):
        """Start nginx if not already started"""
        if not self._services:
            self.stop()

        # Generate initial empty config
        self._generate_nginx_config()

        if self.nginx_is_running():
            Logger.debug("Nginx already started, reloading configuration")
            self._reload_nginx()
            return True

        # Start nginx
        self._start_nginx()
        atexit.register(self.stop)

    def stop(self, force: bool = False) -> None:
        """Stop nginx"""
        if not force and not self.nginx_is_running():
            return

        shell_proxy = self.get_shell_proxy()
        result = shell_proxy.run(['nginx', '-s', 'stop'])
        if result == 0:
            Logger.info("Nginx stopped successfully")
        else:
            Logger.error("Failed to stop nginx")

    def nginx_is_running(self) -> bool:
        """Check if nginx is running"""
        try:
            result = subprocess.run(['ps', 'aux'], check=False, capture_output=True, text=True)
            # Look for nginx processes
            for line in result.stdout.splitlines():
                if 'nginx' in line and 'master process' in line:
                    # Check if our config file is in the command line
                    if self.get_nginx_config_path() in line:
                        return True
                    else:
                        Logger.info("Nginx is running but not using the correct config file")
                        self.stop(force=True)
                        return False

        except subprocess.TimeoutExpired:
            return False
        except FileNotFoundError:
            return False
        return False

    def _generate_nginx_config(self):
        """Generate nginx configuration for all services"""
        config_content = self._build_nginx_config()
        config_path = self.get_nginx_config_path()

        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                f.write(config_content)
            Logger.info(f"Generated nginx config: {config_path}")

        except Exception as e:
            raise Exception(f"Failed to write nginx config to {config_path}: {e}")

    def _reload_nginx(self):
        """Reload nginx configuration"""
        shell_proxy = self.get_shell_proxy()

        # nginx is running, reload it
        result = shell_proxy.run(['nginx', '-s', 'reload'])
        if result == 0:
            Logger.debug("Nginx configuration reloaded successfully")
        else:
            Logger.error("Failed to reload nginx configuration")

    def _start_nginx(self):
        """Start nginx daemon"""
        # Test configuration first
        shell_proxy = self.get_shell_proxy()
        test_result = shell_proxy.run(['nginx', '-t', '-c', self.get_nginx_config_path()])
        if test_result != 0:
            raise Exception("Nginx configuration test failed")

        # Start nginx
        result = shell_proxy.run(['nginx', '-c', self.get_nginx_config_path()])
        if result != 0:
            raise Exception("Failed to start nginx")

        Logger.info("Nginx started successfully")

    def _build_nginx_config(self) -> str:
        """Build nginx configuration content"""
        if not self._services:
            return "# No services registered\n"

        config_lines = []

        for service in self._services.values():
            server_block = service.get_nginx_service_config()
            config_lines.append(server_block)

        server = "\n".join(config_lines)
        # return the complete nginx configuration with the server blocks
        # with indentation for readability
        indented_server = "\n".join(f"\t{line}" for line in server.splitlines())
        nginx_config = self.NGINX_TEMPLATE.replace("[SERVERS]", indented_server)
        return nginx_config.replace("[NGINX_CONFIG_DIR]", self._nginx_config_dir)

    def get_nginx_config_path(self) -> str:
        """Get the path to the generated nginx config file"""
        return os.path.join(self._nginx_config_dir, self._NGINX_CONF_FILENAME)

    def get_shell_proxy(self) -> ShellProxy:
        """Get the ShellProxy instance for this manager"""
        shell_proxy = ShellProxy(self._nginx_config_dir)
        shell_proxy.attach_observer(LoggerMessageObserver())
        return shell_proxy
